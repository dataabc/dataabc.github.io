<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>认知自我</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://cognize.me/"/>
  <updated>2016-07-11T13:58:50.943Z</updated>
  <id>https://cognize.me/</id>
  
  <author>
    <name>Chilly</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>向kindle推送doc文档</title>
    <link href="https://cognize.me/doctokindle/"/>
    <id>https://cognize.me/doctokindle/</id>
    <published>2016-07-11T11:20:24.000Z</published>
    <updated>2016-07-11T13:58:50.943Z</updated>
    
    <content type="html"><![CDATA[<p>kindle可以支持很多文档格式，如doc、docx、pdf、html和jpg等，本教程以doc文档来说明。方法大致分为两部分：发现自己的kindle邮箱和向该邮箱推送doc文档。</p><a id="more"></a><p>另外，为了保护隐私，用红色遮住了个人信息。</p><h2 id="1-发现kindle邮箱"><a href="#1-发现kindle邮箱" class="headerlink" title="1 发现kindle邮箱"></a>1 发现kindle邮箱</h2><p>1.1 打开kindle,点击红框中的三个小黑点；<br><br><br><img src="/img/loading.png" data-original="https://picture.cognize.me/cognize/other/kindle1.jpg" alt><br><br><br>1.2 点击“设置”；<br><br><br><img src="/img/loading.png" data-original="https://picture.cognize.me/cognize/other/kindle2.jpg" alt><br><br><br>1.3 点击“设备选项”；<br><br><br><img src="/img/loading.png" data-original="https://picture.cognize.me/cognize/other/kindle3.jpg" alt><br><br><br>1.4 点击“个性化你的kindle”；<br><br><br><img src="/img/loading.png" data-original="https://picture.cognize.me/cognize/other/kindle4.jpg" alt><br><br><br>1.5 红框中信息即为kindle邮箱。<br><br><br><img src="/img/loading.png" data-original="https://picture.cognize.me/cognize/other/kindle5.jpg" alt><br><br><br>事实上，kindle邮箱的格式是有规律的。假设你的亚马逊账号邮箱是<a href="mailto:mymail@gmail.com" rel="external nofollow noopener noreferrer" target="_blank">mymail@gmail.com</a>，那么你的kindle邮箱很可能就是<a href="mailto:mymail@kindle.cn" rel="external nofollow noopener noreferrer" target="_blank">mymail@kindle.cn</a>。但这只是可能，并不一定是，因为可能在你之前，邮箱为<a href="mailto:mymail@163.com" rel="external nofollow noopener noreferrer" target="_blank">mymail@163.com</a>(或其它<a href="mailto:mymail@xx.com" rel="external nofollow noopener noreferrer" target="_blank">mymail@xx.com</a>邮箱)的亚马逊用户已经注册了kindle，<a href="mailto:mymail@kindle.cn" rel="external nofollow noopener noreferrer" target="_blank">mymail@kindle.cn</a>已经被占用。所以，我们需要以上方法查找kindle邮箱。<br><br></p><h2 id="2-向kindle推送doc文档"><a href="#2-向kindle推送doc文档" class="headerlink" title="2 向kindle推送doc文档"></a>2 向kindle推送doc文档</h2><p>我以“数据挖掘十大经典算法.doc”这个文档为例。<br><br><br><img src="/img/loading.png" data-original="https://picture.cognize.me/cognize/other/kindle6.jpg" alt><br><br><br>首先登录我们注册亚马逊时的邮箱，如<a href="mailto:mymail@gmail.com" rel="external nofollow noopener noreferrer" target="_blank">mymail@gmail.com</a>，然后添加要推送的文件“数据挖掘十大经典算法.doc”为附件，目标邮箱就是刚刚我们获取的kindle邮箱，主题任意，发送邮件就可以了。很快，我们的kindle就会收到推送了。出于安全考虑，kindle默认只接受注册邮箱推送的文档，当然我们也可以添加其它邮箱作为推送邮箱。<br><br><br><img src="/img/loading.png" data-original="https://picture.cognize.me/cognize/other/kindle7.jpg" alt><br><img src="/img/loading.png" data-original="https://picture.cognize.me/cognize/other/kindle8.jpg" alt><br><br></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;kindle可以支持很多文档格式，如doc、docx、pdf、html和jpg等，本教程以doc文档来说明。方法大致分为两部分：发现自己的kindle邮箱和向该邮箱推送doc文档。&lt;/p&gt;
    
    </summary>
    
    
      <category term="kindle" scheme="https://cognize.me/tags/kindle/"/>
    
  </entry>
  
  <entry>
    <title>支付Spotify教程</title>
    <link href="https://cognize.me/payspotify/"/>
    <id>https://cognize.me/payspotify/</id>
    <published>2016-05-28T10:32:54.000Z</published>
    <updated>2016-05-28T11:32:21.145Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/img/loading.png" data-original="https://picture.cognize.me/cognize/other/2016-5-28-payspotify.png" alt></p><p>注意：本教程需要一个拥有“境外支付”功能的财付通账号，因为财付通已不再对外开放此功能了，如果你以前没有开通过此业务，以下的内容就没必要看了。<a id="more"></a><br>另外，本教程只能用来支付美区的Spotify，其它区的用户就不用参考本教程了。<br><br>Spotify作为一个相当不错的音乐流媒体，受到很多人的喜爱。但是它对地区严格限制，即每个国家的用户只能听本国的曲库，要想买会员，还必须使用本国的信用卡或paypal。例如，美国区的Spotify只能用美国本土的信用卡或paypal才能支付成功。我曾经用国际版的paypal和国内的双币卡尝试支付，都是以失败而告终。<br><br>现在说一下，国内如果没有美卡，要想支付成功，只能通过美区的paypal支付。那美区的paypal应该如何支付呢？腾讯的财付通有一个叫“境外支付”的业务，它会为用户提供一个虚拟的美国运通卡，然后我们可以通过这个虚拟运通卡注册美区的paypal，进而在支付Spotify时使用美区的paypal成功支付。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://picture.cognize.me/cognize/other/2016-5-28-payspotify.png&quot; alt&gt;&lt;/p&gt;
&lt;p&gt;注意：本教程需要一个拥有“境外支付”功能的财付通账号，因为财付通已不再对外开放此功能了，如果你以前没有开通过此业务，以下的内容就没必要看了。
    
    </summary>
    
    
      <category term="music" scheme="https://cognize.me/tags/music/"/>
    
  </entry>
  
  <entry>
    <title>Django上传并显示图片</title>
    <link href="https://cognize.me/djangopic/"/>
    <id>https://cognize.me/djangopic/</id>
    <published>2016-05-09T14:14:20.000Z</published>
    <updated>2016-05-11T16:36:13.946Z</updated>
    
    <content type="html"><![CDATA[<p>非常详细的教程，教大家一步步用Django上传与显示图片。用例子学习是一个不错的方法，下面我用一个非常简单的例子为大家讲解Django中图片的上传与显示。</p><a id="more"></a><h4 id="1-创建名称为‘a’的项目"><a href="#1-创建名称为‘a’的项目" class="headerlink" title="1. 创建名称为‘a’的项目"></a>1. 创建名称为‘a’的项目</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$django</span>-admin startproject a</span><br></pre></td></tr></table></figure><h4 id="2-在项目‘a’中创建名为‘b’的app"><a href="#2-在项目‘a’中创建名为‘b’的app" class="headerlink" title="2.在项目‘a’中创建名为‘b’的app"></a>2.在项目‘a’中创建名为‘b’的app</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$cd</span> a</span><br><span class="line"><span class="variable">$python</span> manage.py startapp b</span><br></pre></td></tr></table></figure><h4 id="3-把b加入到settings-py中的INSTALLED-APPS中"><a href="#3-把b加入到settings-py中的INSTALLED-APPS中" class="headerlink" title="3.把b加入到settings.py中的INSTALLED_APPS中"></a>3.把b加入到settings.py中的INSTALLED_APPS中</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">INSTALLED_APPS = (</span><br><span class="line">    <span class="string">'django.contrib.admin'</span>,</span><br><span class="line">    <span class="string">'django.contrib.auth'</span>,</span><br><span class="line">    <span class="string">'django.contrib.contenttypes'</span>,</span><br><span class="line">    <span class="string">'django.contrib.sessions'</span>,</span><br><span class="line">    <span class="string">'django.contrib.messages'</span>,</span><br><span class="line">    <span class="string">'django.contrib.staticfiles'</span>,</span><br><span class="line">    <span class="string">'b'</span>,</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h4 id="4-在文件夹b下，编辑models-py，创建IMG类"><a href="#4-在文件夹b下，编辑models-py，创建IMG类" class="headerlink" title="4.在文件夹b下，编辑models.py，创建IMG类"></a>4.在文件夹b下，编辑models.py，创建IMG类</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> __future__ <span class="keyword">import</span> unicode_literals</span><br><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</span><br><span class="line"><span class="comment"># Create your models here.</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">IMG</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    img = models.ImageField(upload_to=<span class="string">'upload'</span>)</span><br></pre></td></tr></table></figure><h4 id="5-更新数据库"><a href="#5-更新数据库" class="headerlink" title="5.更新数据库"></a>5.更新数据库</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Django 1.7及以上的版本需要用以下命令</span><br><span class="line">python manage.py makemigrations</span><br><span class="line">python manage.py migrate</span><br><span class="line"></span><br><span class="line">Django 1.7以下用以下命令</span><br><span class="line">python manage.py syncdb</span><br></pre></td></tr></table></figure><h4 id="6-在文件夹b下，编辑views-py，创建图片上传与显示函数"><a href="#6-在文件夹b下，编辑views-py，创建图片上传与显示函数" class="headerlink" title="6.在文件夹b下，编辑views.py，创建图片上传与显示函数"></a>6.在文件夹b下，编辑views.py，创建图片上传与显示函数</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> render</span><br><span class="line"><span class="keyword">from</span> b.models <span class="keyword">import</span> IMG</span><br><span class="line"><span class="comment"># Create your views here.</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">uploadImg</span><span class="params">(request)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">'POST'</span>:</span><br><span class="line">        new_img = IMG(</span><br><span class="line">            img=request.FILES.get(<span class="string">'img'</span>)</span><br><span class="line">        )</span><br><span class="line">        new_img.save()</span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">'b/uploadimg.html'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">showImg</span><span class="params">(request)</span>:</span></span><br><span class="line">    imgs = IMG.objects.all()</span><br><span class="line">    content = &#123;</span><br><span class="line">        <span class="string">'imgs'</span>:imgs,</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">'b/showimg.html'</span>, content)</span><br></pre></td></tr></table></figure><h4 id="7-在a文件夹下，编辑urls-py文件"><a href="#7-在a文件夹下，编辑urls-py文件" class="headerlink" title="7.在a文件夹下，编辑urls.py文件"></a>7.在a文件夹下，编辑urls.py文件</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.conf.urls <span class="keyword">import</span> url</span><br><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line"><span class="keyword">from</span> b <span class="keyword">import</span> views</span><br><span class="line"><span class="keyword">from</span> django.conf.urls.static <span class="keyword">import</span> static</span><br><span class="line"><span class="keyword">from</span> django.conf <span class="keyword">import</span> settings</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    url(<span class="string">r'^admin/'</span>, admin.site.urls),</span><br><span class="line">    url(<span class="string">r'^upload'</span>, <span class="string">'b.views.uploadImg'</span>),</span><br><span class="line">    url(<span class="string">r'^show'</span>, <span class="string">'b.views.showImg'</span>),</span><br><span class="line">] + static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)</span><br></pre></td></tr></table></figure><h4 id="8-编辑a文件夹下的setting-py文件，添加如下代码："><a href="#8-编辑a文件夹下的setting-py文件，添加如下代码：" class="headerlink" title="8.编辑a文件夹下的setting.py文件，添加如下代码："></a>8.编辑a文件夹下的setting.py文件，添加如下代码：</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">MEDIA_URL = <span class="string">'/media/'</span></span><br><span class="line">MEDIA_ROOT = os.path.join(BASE_DIR, <span class="string">'media'</span>).replace(<span class="string">'\\'</span>, <span class="string">'/'</span>)</span><br></pre></td></tr></table></figure><h4 id="9-在b文件夹下创建templates文件夹，再在templates文件夹下创建b文件夹，再在新创建的b文件夹下创建uploadimg-html文件，内容如下："><a href="#9-在b文件夹下创建templates文件夹，再在templates文件夹下创建b文件夹，再在新创建的b文件夹下创建uploadimg-html文件，内容如下：" class="headerlink" title="9.在b文件夹下创建templates文件夹，再在templates文件夹下创建b文件夹，再在新创建的b文件夹下创建uploadimg.html文件，内容如下："></a>9.在b文件夹下创建templates文件夹，再在templates文件夹下创建b文件夹，再在新创建的b文件夹下创建uploadimg.html文件，内容如下：</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">method</span>=<span class="string">"POST"</span> <span class="attr">enctype</span>=<span class="string">"multipart/form-data"</span>&gt;</span></span><br><span class="line">&#123;% csrf_token %&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"file"</span> <span class="attr">name</span>=<span class="string">"img"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"submit"</span>&gt;</span>上传<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="10-在uploadimg-html同目录下创建showimg-html文件"><a href="#10-在uploadimg-html同目录下创建showimg-html文件" class="headerlink" title="10.在uploadimg.html同目录下创建showimg.html文件"></a>10.在uploadimg.html同目录下创建showimg.html文件</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% for img in imgs %&#125;</span><br><span class="line">&amp;lt;img src='&#123;&#123; img.img.url &#125;&#125;' /&gt;</span><br><span class="line">&#123;% endfor %&#125;</span><br></pre></td></tr></table></figure><h4 id="11-运行django程序"><a href="#11-运行django程序" class="headerlink" title="11.运行django程序"></a>11.运行django程序</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$python</span> manage.py runserver</span><br></pre></td></tr></table></figure><h4 id="12-上传图片"><a href="#12-上传图片" class="headerlink" title="12.上传图片"></a>12.上传图片</h4><p>打开浏览器，输入地址：<a href="http://127.0.0.1:8000/upload" rel="external nofollow noopener noreferrer" target="_blank">http://127.0.0.1:8000/upload</a>,进入图片上传页面，点击“浏览”，选择要上传的图片，“上传”之。因为页面设计的比较简单，所以大家上传图片后，在本页面看不到任何变化，但确实已经上传了；</p><h4 id="13-显示上传的图片"><a href="#13-显示上传的图片" class="headerlink" title="13.显示上传的图片"></a>13.显示上传的图片</h4><p>在浏览器中输入：<a href="http://127.0.0.1:8000/show" rel="external nofollow noopener noreferrer" target="_blank">http://127.0.0.1:8000/show</a>，就会看到我们已经上传的图片。</p><h4 id="PS：以上步骤仅仅是非常简单的图片上传与显示，更多复杂的图片上传显示问题，大家可以在此基础上修改。"><a href="#PS：以上步骤仅仅是非常简单的图片上传与显示，更多复杂的图片上传显示问题，大家可以在此基础上修改。" class="headerlink" title="PS：以上步骤仅仅是非常简单的图片上传与显示，更多复杂的图片上传显示问题，大家可以在此基础上修改。"></a>PS：以上步骤仅仅是非常简单的图片上传与显示，更多复杂的图片上传显示问题，大家可以在此基础上修改。</h4>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;非常详细的教程，教大家一步步用Django上传与显示图片。用例子学习是一个不错的方法，下面我用一个非常简单的例子为大家讲解Django中图片的上传与显示。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Django" scheme="https://cognize.me/tags/Django/"/>
    
  </entry>
  
  <entry>
    <title>用Python编写新浪微博爬虫</title>
    <link href="https://cognize.me/weibospider/"/>
    <id>https://cognize.me/weibospider/</id>
    <published>2016-03-26T14:54:01.000Z</published>
    <updated>2019-08-15T14:56:13.677Z</updated>
    
    <content type="html"><![CDATA[<p>最近用Python写了一个新浪微博的爬虫，可以用来爬取用户所发的<strong>微博数</strong>、<strong>关注数</strong>、<strong>粉丝数</strong>、<strong>微博内容</strong>以及每条微博对应的<strong>发布时间</strong>、<strong>转发数</strong>、<strong>点赞数</strong>和<strong>评论数</strong>等信息。<a id="more"></a>爬虫源代码已经传到了我的<a href="https://github.com/dataabc/weiboSpider" title="Github" rel="external nofollow noopener noreferrer" target="_blank">Github</a>里，地址：<a href="https://github.com/dataabc/weiboSpider" rel="external nofollow noopener noreferrer" target="_blank">https://github.com/dataabc/weiboSpider</a>，欢迎关注,当然不关注也没关系。<br><br><br><strong>以下为2019/08/15更新</strong><br>又写了一个<a href="https://github.com/dataabc/weibo-crawler" rel="external nofollow noopener noreferrer" target="_blank"><strong>免cookie版</strong></a>，二者功能类似，目前免cookie版功能更多一些。多了爬取微博话题(即两个#中的内容)和爬取@微博用户功能，用户的信息也爬取的更多。下面以免cookie版为例进行说明。</p><h2 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h2><p>爬取新浪微博信息，并写入csv文件，文件名为目标用户id加”.csv”的形式，同时还会下载该微博原始图片(可选)。<br><br>以爬取迪丽热巴的微博为例，她的微博昵称为”Dear-迪丽热巴”，id为1669879400(后面会讲如何获取用户id)。我们选择爬取她的全部微博。程序会自动生成一个weibo文件夹，我们以后爬取的所有微博都被存储在weibo文件夹里。然后程序在该文件夹下生成一个名为”Dear-迪丽热巴”的文件夹，迪丽热巴的所有微博爬取结果都在这里。”Dear-迪丽热巴”文件夹里包含一个csv文件和一个img文件夹，img文件夹用来存储下载到的图片。<br><br>csv文件结果如下所示：<br><img src="/img/loading.png" data-original="https://picture.cognize.me/cognize/github/weibo-crawler/weibo_csv.png" alt><em>1669879400.csv</em><br><br>本csv文件是爬取“全部微博”(原创微博+转发微博)的结果文件。因为迪丽热巴很多微博本身都没有图片、发布工具、位置、话题和@用户等信息，所以当这些内容没有时对应位置为空。”是否原创”列用来标记是否为原创微博，<br>当为转发微博时，文件中还包含转发微博的信息。为了简便起见，姑且将转发微博中被转发的原始微博称为<strong>源微博</strong>，它的用户id、昵称、微博id等都在名称前加上源字，以便与目标用户自己发的微博区分。对于转发微博，程序除了获取用户原创部分的信息，还会获取<strong>源用户id</strong>、<strong>源用户昵称</strong>、<strong>源微博id</strong>、<strong>源微博正文</strong>、<strong>源微博原始图片url</strong>、<strong>源微博位置</strong>、<strong>源微博日期</strong>、<strong>源微博工具</strong>、<strong>源微博点赞数</strong>、<strong>源微博评论数</strong>、<strong>源微博转发数</strong>、<strong>源微博话题</strong>、<strong>源微博@用户</strong>等信息。原创微博因为没有这些转发信息，所以对应位置为空。若爬取的是”全部<strong>原创</strong>微博”，则csv文件中不会包含”是否原创”及其之后的转发属性列；<br><br>下载的图片如下所示：<br><img src="/img/loading.png" data-original="https://picture.cognize.me/cognize/github/weibo-crawler/img.png" alt><em>img文件夹</em><br><br>本次下载了788张图片，大小一共1.21GB，包括她原创微博中的所有图片。图片名为yyyymmdd+微博id的形式，若某条微博存在多张图片，则图片名中还会包括它在微博图片中的序号。若某图片下载失败，程序则会以“weibo_id:pic_url”的形式将出错微博id和图片url写入同文件夹下的not_downloaded.txt里；若图片全部下载成功则不会生成not_downloaded.txt；<br><br>下载的视频如下所示：<br><img src="/img/loading.png" data-original="https://picture.cognize.me/cognize/github/weibo-crawler/video.png" alt><em>video文件夹</em><br><br>本次下载了66个视频，是她原创微博中的视频，视频名为yyyymmdd+微博id的形式。有三个视频因为网络原因下载失败，程序将它们的微博id和视频url分别以“weibo_id:video_url”的形式写到了同文件夹下的not_downloaded.txt里。</p><h2 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h2><p>用户id，例如新浪微博昵称为”Dear-迪丽热巴”的id为”1669879400”</p><h2 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h2><p><strong>用户信息</strong><br></p><ul><li>用户id：微博用户id，为一串数字形式</li><li>用户昵称：微博用户昵称，如”Dear-迪丽热巴”</li><li>性别：微博用户性别</li><li>微博数：用户的全部微博数（转发微博+原创微博）</li><li>粉丝数：用户的粉丝数</li><li>关注数：用户关注的微博数量</li><li>简介：用户简介</li><li>主页地址：微博移动版主页url</li><li>头像url：用户头像url</li><li>高清头像url：用户高清头像url</li><li>微博等级：用户微博等级</li><li>会员等级：微博会员用户等级，普通用户该等级为0</li><li>是否认证：用户是否认证，为布尔类型</li><li>认证类型：用户认证类型，如个人认证、企业认证、政府认证等</li><li>认证信息：为认证用户特有，用户信息栏显示的认证信息</li></ul><hr><p><strong>微博信息</strong><br></p><ul><li>微博id：微博的id，为一串数字形式</li><li>微博内容：微博正文</li><li>原始图片url：原创微博图片和转发微博转发理由中图片的url，若某条微博存在多张图片，每个url以英文逗号分隔，若没有图片则值为’’</li><li>微博发布位置：位置微博中的发布位置</li><li>微博发布时间：微博发布时的时间，精确到天</li><li>点赞数：微博被赞的数量</li><li>转发数：微博被转发的数量</li><li>评论数：微博被评论的数量</li><li>微博发布工具：微博的发布工具，如iPhone客户端、HUAWEI Mate 20 Pro等，若没有则值为’’</li><li>话题：微博话题，即两个#中的内容，若存在多个话题，每个url以英文逗号分隔，若没有则值为’’</li><li>@用户：微博@的用户，若存在多个@用户，每个url以英文逗号分隔，若没有则值为’’</li><li>原始微博：为转发微博所特有，是转发微博中那条被转发的微博，存储为字典形式，包含了上述微博信息中的所有内容，如微博id、微博内容等等</li><li>结果文件：保存在当前目录weibo文件夹下以用户昵称为名的文件夹里，名字为”user_id.csv”形式</li><li>微博图片：原创微博中的图片，保存在以用户昵称为名的文件夹下的img文件夹里</li><li>微博视频：原创微博中的视频，保存在以用户昵称为名的文件夹下的video文件夹里</li></ul><h2 id="运行环境"><a href="#运行环境" class="headerlink" title="运行环境"></a>运行环境</h2><ul><li>开发语言：python2/python3</li><li>系统： Windows/Linux/macOS</li></ul><h2 id="使用说明"><a href="#使用说明" class="headerlink" title="使用说明"></a>使用说明</h2><h3 id="1-下载脚本"><a href="#1-下载脚本" class="headerlink" title="1.下载脚本"></a>1.下载脚本</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> https://github.com/dataabc/weibo-crawler.git</span><br></pre></td></tr></table></figure><p>运行上述命令，将本项目下载到当前目录，如果下载成功当前目录会出现一个名为”weibo-crawler”的文件夹；</p><h3 id="2-设置user-id"><a href="#2-设置user-id" class="headerlink" title="2.设置user_id"></a>2.设置user_id</h3><p>打开weibo-crawler文件夹下的”<strong>weibo.py</strong>“文件，将<strong>user_id</strong>替换成想要爬取的微博的user_id，后面会详细讲解如何获取user_id;</p><h3 id="3-安装依赖"><a href="#3-安装依赖" class="headerlink" title="3.安装依赖"></a>3.安装依赖</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install -r requirements.txt</span><br></pre></td></tr></table></figure><h3 id="4-运行脚本"><a href="#4-运行脚本" class="headerlink" title="4.运行脚本"></a>4.运行脚本</h3><p>大家可以根据自己的运行环境选择运行方式，Linux可以通过</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ python weibo.py</span><br></pre></td></tr></table></figure><p>运行;</p><h3 id="5-按需求修改脚本（可选）"><a href="#5-按需求修改脚本（可选）" class="headerlink" title="5.按需求修改脚本（可选）"></a>5.按需求修改脚本（可选）</h3><p>本脚本是一个Weibo类，用户可以按照自己的需求调用Weibo类。<br>例如用户可以直接在”weibo.py”文件中调用Weibo类，具体调用代码示例如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">user_id = <span class="number">1669879400</span></span><br><span class="line">filter = <span class="number">1</span></span><br><span class="line">pic_download = <span class="number">1</span></span><br><span class="line">wb = Weibo(user_id, filter, pic_download) <span class="comment">#调用Weibo类，创建微博实例wb</span></span><br><span class="line">wb.start()  <span class="comment">#爬取微博信息</span></span><br></pre></td></tr></table></figure><p>user_id可以改成任意合法的用户id；filter默认值为0，表示爬取所有微博信息（转发微博+原创微博），为1表示只爬取用户的所有原创微博；pic_download默认值为0，代表不下载微博原始图片，1代表下载；wb是Weibo类的一个实例，也可以是其它名字，只要符合python的命名规范即可；通过执行wb.start() 完成了微博的爬取工作。在上述代码执行后，我们可以得到很多信息：<br><br><strong>wb.user</strong>：存储目标微博用户信息；<br><br>wb.user包含爬取到的微博用户信息，如<strong>用户id</strong>、<strong>用户昵称</strong>、<strong>性别</strong>、<strong>微博数</strong>、<strong>粉丝数</strong>、<strong>关注数</strong>、<strong>简介</strong>、<strong>主页地址</strong>、<strong>头像url</strong>、<strong>高清头像url</strong>、<strong>微博等级</strong>、<strong>会员等级</strong>、<strong>是否认证</strong>、<strong>认证类型</strong>、<strong>认证信息</strong>等，大家可以点击”详情”查看具体用法。</p><details><summary>详情</summary><p><strong>id</strong>：微博用户id，取值方式为wb.user[‘id’],由一串数字组成；<br><br><strong>screen_name</strong>：微博用户昵称，取值方式为wb.user[‘screen_name’]；<br><br><strong>gender</strong>：微博用户性别，取值方式为wb.user[‘gender’]，取值为f或m，分别代表女和男；<br><br><strong>statuses_count</strong>：微博数，取值方式为wb.user[‘statuses_count’]；<br><br><strong>followers_count</strong>：微博粉丝数，取值方式为wb.user[‘followers_count’]；<br><br><strong>follow_count</strong>：微博关注数，取值方式为wb.user[‘follow_count’]；<br><br><strong>description</strong>：微博简介，取值方式为wb.user[‘description’]；<br><br><strong>profile_url</strong>：微博主页，取值方式为wb.user[‘profile_url’]; <br><br><strong>profile_image_url</strong>：微博头像url，取值方式为wb.user[‘profile_image_url’]；<br><br><strong>avatar_hd</strong>：微博高清头像url，取值方式为wb.user[‘avatar_hd’]；<br><br><strong>urank</strong>：微博等级，取值方式为wb.user[‘urank’]；<br><br><strong>mbrank</strong>：微博会员等级，取值方式为wb.user[‘mbrank’]，普通用户会员等级为0；<br><br><strong>verified</strong>：微博是否认证，取值方式为wb.user[‘verified’]，取值为true和false；<br><br><strong>verified_type</strong>：微博认证类型，取值方式为wb.user[‘verified_type’]，没有认证值为-1，个人认证值为0，企业认证值为2，政府认证值为3，这些类型仅是个人猜测，应该不全，大家可以根据实际情况判断；<br><br><strong>verified_reason</strong>：微博认证信息，取值方式为wb.user[‘verified_reason’]，只有认证用户拥有此属性。<br></p></details><p><strong>wb.weibo</strong>：存储爬取到的所有微博信息；<br><br>wb.weibo包含爬取到的所有微博信息，如<strong>微博id</strong>、<strong>正文</strong>、<strong>原始图片url</strong>、<strong>视频url</strong>、<strong>位置</strong>、<strong>日期</strong>、<strong>发布工具</strong>、<strong>点赞数</strong>、<strong>转发数</strong>、<strong>评论数</strong>、<strong>话题</strong>、<strong>@用户</strong>等。如果爬的是全部微博(原创+转发)，除上述信息之外，还包含<strong>原始用户id</strong>、<strong>原始用户昵称</strong>、<strong>原始微博id</strong>、<strong>原始微博正文</strong>、<strong>原始微博原始图片url</strong>、<strong>原始微博位置</strong>、<strong>原始微博日期</strong>、<strong>原始微博工具</strong>、<strong>原始微博点赞数</strong>、<strong>原始微博评论数</strong>、<strong>原始微博转发数</strong>、<strong>原始微博话题</strong>、<strong>原始微博@用户</strong>等信息。wb.weibo是一个列表，包含了爬取的所有微博信息。wb.weibo[0]为爬取的第一条微博，wb.weibo[1]为爬取的第二条微博，以此类推。当filter=1时，wb.weibo[0]为爬取的第一条<strong>原创</strong>微博，以此类推。wb.weibo[0][‘id’]为第一条微博的id，wb.weibo[0][‘text’]为第一条微博的正文，wb.weibo[0][‘created_at’]为第一条微博的发布时间，还有其它很多信息不在赘述，大家可以点击下面的”详情”查看具体用法。</p><details><summary>详情</summary><p><strong>user_id</strong>：存储微博用户id。如wb.weibo[0][‘user_id’]为最新一条微博的用户id；<br><br><strong>screen_name</strong>：存储微博昵称。如wb.weibo[0][‘screen_name’]为最新一条微博的昵称；<br><br><strong>id</strong>：存储微博id。如wb.weibo[0][‘id’]为最新一条微博的id；<br><br><strong>text</strong>：存储微博正文。如wb.weibo[0][‘text’]为最新一条微博的正文；<br><br><strong>pics</strong>：存储原创微博的原始图片url。如wb.weibo[0][‘pics’]为最新一条微博的原始图片url，若该条微博有多张图片，则存储多个url，以英文逗号分割；若该微博没有图片，则值为’’；<br><br><strong>video_url</strong>：存储原创微博的视频url。如wb.weibo[0][‘video_url’]为最新一条微博的视频url；若该微博没有视频，则值为’’；<br><br><strong>location</strong>：存储微博的发布位置。如wb.weibo[0][‘location’]为最新一条微博的发布位置，若该条微博没有位置信息，则值为’’；<br><br><strong>created_at</strong>：存储微博的发布时间。如wb.weibo[0][‘created_at’]为最新一条微博的发布时间；<br><br><strong>source</strong>：存储微博的发布工具。如wb.weibo[0][‘source’]为最新一条微博的发布工具；<br><br><strong>attitudes_count</strong>：存储微博获得的点赞数。如wb.weibo[0][‘attitudes_count’]为最新一条微博获得的点赞数；<br><br><strong>comments_count</strong>：存储微博获得的评论数。如wb.weibo[0][‘comments_count’]为最新一条微博获得的评论数；<br><br><strong>reposts_count</strong>：存储微博获得的转发数。如wb.weibo[0][‘reposts_count’]为最新一条微博获得的转发数；<br><br><strong>topics</strong>：存储微博话题，即两个#中的内容。如wb.weibo[0][‘topics’]为最新一条微博的话题，若该条微博没有话题信息，则值为’’；<br><br><strong>at_users</strong>：存储微博@的用户。如wb.weibo[0][‘at_users’]为最新一条微博@的用户，若该条微博没有@的用户，则值为’’；<br><br><strong>retweet</strong>：存储转发微博中原始微博的全部信息。假如wb.weibo[0]为转发微博，则wb.weibo[0][‘retweet’]为该转发微博的原始微博，它存储的属性与wb.weibo[0]一样，只是没有retweet属性;若该条微博为原创微博，则wb[0]没有”retweet”属性，大家可以点击”详情”查看具体用法。<br></p><details><summary>详情</summary><p>假设爬取到的第i条微博为转发微博，则它存在以下信息：<br><br><strong>user_id</strong>：存储原始微博用户id。wb.weibo[i-1][‘retweet’][‘user_id’]为该原始微博的用户id；<br><br><strong>screen_name</strong>：存储原始微博昵称。wb.weibo[i-1][‘retweet’][‘screen_name’]为该原始微博的昵称；<br><br><strong>id</strong>：存储原始微博id。wb.weibo[i-1][‘retweet’][‘id’]为该原始微博的id；<br><br><strong>text</strong>：存储原始微博正文。wb.weibo[i-1][‘retweet’][‘text’]为该原始微博的正文；<br><br><strong>pics</strong>：存储原始微博的原始图片url。wb.weibo[i-1][‘retweet’][‘pics’]为该原始微博的原始图片url，若该原始微博有多张图片，则存储多个url，以英文逗号分割；若该原始微博没有图片，则值为’’；<br><br><strong>video_url</strong>：存储原始微博的视频url。如wb.weibo[i-1][‘retweet’][‘video_url’]为该原始微博的视频url；若该微博没有视频，则值为’’；<br><br><strong>location</strong>：存储原始微博的发布位置。wb.weibo[i-1][‘retweet’][‘location’]为该原始微博的发布位置，若该原始微博没有位置信息，则值为’’；<br><br><strong>created_at</strong>：存储原始微博的发布时间。wb.weibo[i-1][‘retweet’][‘created_at’]为该原始微博的发布时间；<br><br><strong>source</strong>：存储原始微博的发布工具。wb.weibo[i-1][‘retweet’][‘source’]为该原始微博的发布工具；<br><br><strong>attitudes_count</strong>：存储原始微博获得的点赞数。wb.weibo[i-1][‘retweet’][‘attitudes_count’]为该原始微博获得的点赞数；<br><br><strong>comments_count</strong>：存储原始微博获得的评论数。wb.weibo[i-1][‘retweet’][‘comments_count’]为该原始微博获得的评论数；<br><br><strong>reposts_count</strong>：存储原始微博获得的转发数。wb.weibo[i-1][‘retweet’][‘reposts_count’]为该原始微博获得的转发数；<br><br><strong>topics</strong>：存储原始微博话题，即两个#中的内容。wb.weibo[i-1][‘retweet’][‘topics’]为该原始微博的话题，若该原始微博没有话题信息，则值为’’；<br><br><strong>at_users</strong>：存储原始微博@的用户。wb.weibo[i-1][‘retweet’][‘at_users’]为该原始微博@的用户，若该原始微博没有@的用户，则值为’’。<br></p></details></details><h2 id="如何获取user-id"><a href="#如何获取user-id" class="headerlink" title="如何获取user_id"></a>如何获取user_id</h2><p>1.打开网址<a href="https://weibo.cn" rel="external nofollow noopener noreferrer" target="_blank">https://weibo.cn</a>，搜索我们要找的人，如”迪丽热巴”，进入她的主页；<br><br><img src="/img/loading.png" data-original="https://picture.cognize.me/cognize/github/weibospider/user_home.png" alt><br>2.按照上图箭头所指，点击”资料”链接，跳转到用户资料页面；<br><br><img src="/img/loading.png" data-original="https://picture.cognize.me/cognize/github/weibospider/user_info.png" alt><br>如上图所示，迪丽热巴微博资料页的地址为”<a href="https://weibo.cn/1669879400/info" rel="external nofollow noopener noreferrer" target="_blank">https://weibo.cn/1669879400/info</a>“，其中的”1669879400”即为此微博的user_id。<br><br>事实上，此微博的user_id也包含在用户主页(<a href="https://weibo.cn/u/1669879400?f=search_0" rel="external nofollow noopener noreferrer" target="_blank">https://weibo.cn/u/1669879400?f=search_0</a>)中，之所以我们还要点击主页中的”资料”来获取user_id，是因为很多用户的主页不是”<a href="https://weibo.cn/user_id?f=search_0" rel="external nofollow noopener noreferrer" target="_blank">https://weibo.cn/user_id?f=search_0</a>“的形式，而是”<a href="https://weibo.cn/个性域名?f=search_0" rel="external nofollow noopener noreferrer" target="_blank">https://weibo.cn/个性域名?f=search_0</a>“或”<a href="https://weibo.cn/微号?f=search_0" rel="external nofollow noopener noreferrer" target="_blank">https://weibo.cn/微号?f=search_0</a>“的形式。其中”微号”和user_id都是一串数字，如果仅仅通过主页地址提取user_id，很容易将”微号”误认为user_id。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近用Python写了一个新浪微博的爬虫，可以用来爬取用户所发的&lt;strong&gt;微博数&lt;/strong&gt;、&lt;strong&gt;关注数&lt;/strong&gt;、&lt;strong&gt;粉丝数&lt;/strong&gt;、&lt;strong&gt;微博内容&lt;/strong&gt;以及每条微博对应的&lt;strong&gt;发布时间&lt;/strong&gt;、&lt;strong&gt;转发数&lt;/strong&gt;、&lt;strong&gt;点赞数&lt;/strong&gt;和&lt;strong&gt;评论数&lt;/strong&gt;等信息。
    
    </summary>
    
    
      <category term="Python" scheme="https://cognize.me/tags/Python/"/>
    
      <category term="微博爬虫" scheme="https://cognize.me/tags/%E5%BE%AE%E5%8D%9A%E7%88%AC%E8%99%AB/"/>
    
  </entry>
  
  <entry>
    <title>解决matplotlib中文显示问题</title>
    <link href="https://cognize.me/matplotlibZn/"/>
    <id>https://cognize.me/matplotlibZn/</id>
    <published>2015-10-09T14:06:10.000Z</published>
    <updated>2015-10-10T04:21:50.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近在学机器学习，利用Python的matplotlib画图，但是无法显示中文。<a id="more"></a><br>先说一下我的软件工作环境：<br>　　　　　　　　　　　　系统：Windows 10 64位<br>　　　　　　　　　　　　软件：Python 2.7<br>网上google了很多解决方案，要么是python版本不对，要么是系统原因，当然还有一些其它未知因素，总之都不能解决中文显示问题。后来竟然在一篇解决python 3中文显示的文章中，找到了python 2.7中matplotlib中文显示问题的解决方案，方法如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">myfont = matplotlib.font_manager.FontProperties(fname=<span class="string">'C:/Windows/Fonts/msyh.ttc'</span>)</span><br></pre></td></tr></table></figure><p>在用matplotlib画图前，先定义如上字体，然后再使用到中文时指定该字体即可。<font color="red"><strong>事实上，网上有一种类似的方法，也是调用系统本地的字体文件，它调用的是’C:/Windows/Fonts/msyh.ttf’文件，但是我发现它对我现在的工作环境是无效的，而’C:/Windows/Fonts/msyh.ttc’确实有效的。所以利用’msyh.ttf’方法无效的同学可以把文件改为’msyh.ttc’试一试。因为思路相同，大家千万要分清，它们是两种不同的方法。另外，经测试，改成’simsun.ttc’，中文也是可以正常显示的。所以，我推测，我现在系统的字体文件是.tcc格式而非.ttf，大家也可以尝试改成系统其它的.ttc。</strong></font>具体的用法大家可以看一下下面的例子：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pylab <span class="keyword">import</span> *  </span><br><span class="line">myfont = matplotlib.font_manager.FontProperties(fname=<span class="string">'C:/Windows/Fonts/msyh.ttc'</span>)</span><br><span class="line">t = arange(-pi, pi, <span class="number">0.01</span>)  </span><br><span class="line">y = sin(t)</span><br><span class="line">figure(figsize=(<span class="number">12</span>,<span class="number">9</span>))</span><br><span class="line">scatter(t, y)  </span><br><span class="line">title(<span class="string">u'这里写的是中文'</span>,fontproperties=myfont) <span class="comment">#指定字体  </span></span><br><span class="line">xlabel(<span class="string">u'X坐标'</span>,fontproperties=myfont)  </span><br><span class="line">ylabel(<span class="string">u'Y坐标'</span>,fontproperties=myfont)  </span><br><span class="line">legend([<span class="string">u'图例'</span>],prop=myfont)</span><br></pre></td></tr></table></figure><p>显示效果如下图所示：<br><img src="/img/loading.png" data-original="https://picture.cognize.me/cognize/python/2015-10-9-matplotlibZn.png" alt><br>首先我们先定义了myfont，然后在使用时将字体设置为myfont即可(别忘了在中文前要加上u)。很多很多情况都是通过fontproperties=myfont设置字体。这让我一度以为所有的中文设置都是通过fontproperties=myfont方式，结果发现在设置legend时出错，后来查看函数的说明才知道legend通过prop设置字体。所以，想要在图例中显示中文的小伙伴一定注意。</p><p>参考文章:<em><a href="http://my.oschina.net/lenglingx/blog/393571" rel="external nofollow noopener noreferrer" target="_blank">http://my.oschina.net/lenglingx/blog/393571</a></em></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近在学机器学习，利用Python的matplotlib画图，但是无法显示中文。
    
    </summary>
    
    
      <category term="Python" scheme="https://cognize.me/tags/Python/"/>
    
      <category term="matplotlib" scheme="https://cognize.me/tags/matplotlib/"/>
    
  </entry>
  
  <entry>
    <title>R语言之outer函数</title>
    <link href="https://cognize.me/r-outer/"/>
    <id>https://cognize.me/r-outer/</id>
    <published>2015-09-12T08:23:22.000Z</published>
    <updated>2015-09-12T09:30:40.000Z</updated>
    
    <content type="html"><![CDATA[<p>在R语言中，outer函数用来求向量的外积。<br>假设有一个向量<strong>A</strong>和向量<strong>B</strong>,向量<strong>B</strong>与向量<strong>A</strong>的外积(<strong>B</strong>x<strong>A</strong>)就是这样一个向量，该向量的方向同时垂直于向量<strong>A</strong>和向量<strong>B</strong>（遵循右手法则），该向量的大小为|<strong>B</strong>|·|<strong>A</strong>|·sin&lt;<strong>B</strong>,<strong>A</strong>&gt;，其中&lt;<strong>B</strong>,<strong>A</strong>&gt;为向量<strong>A</strong>、<strong>B</strong>的夹角。<a id="more"></a><br>假设<strong>A</strong>=(a1,a2,a3),<strong>B</strong>=(b1,b2,b3,b4),则<strong>B</strong>x<strong>A</strong>的计算过程如下图所示：<br><img src="/img/loading.png" data-original="https://picture.cognize.me/cognize/other/2015-9-12-r-outer.png?imageslim" alt><br>在R语言中，我们如果想求向量<strong>A</strong>、<strong>B</strong>的外积，只需要：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">outer(A,B)</span><br></pre></td></tr></table></figure><p>上述语句与</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">outer(A,B,<span class="string">"*"</span>)</span><br></pre></td></tr></table></figure><p>结果相同，因此，默认情况下，第三个参数为”&#42;”。我们也可以把它改成”+”、“-”等值，当然结果也就变成<strong>A</strong>、<strong>B</strong>向量对应数值相加或相减的形式。<br>参考内容：<a href="https://zh.wikipedia.org/wiki/外积" rel="external nofollow noopener noreferrer" target="_blank">https://zh.wikipedia.org/wiki/外积</a><br>　　　　　<a href="https://www.youtube.com/watch?v=x_o-JqRMOKs" rel="external nofollow noopener noreferrer" target="_blank">https://www.youtube.com/watch?v=x_o-JqRMOKs</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在R语言中，outer函数用来求向量的外积。&lt;br&gt;假设有一个向量&lt;strong&gt;A&lt;/strong&gt;和向量&lt;strong&gt;B&lt;/strong&gt;,向量&lt;strong&gt;B&lt;/strong&gt;与向量&lt;strong&gt;A&lt;/strong&gt;的外积(&lt;strong&gt;B&lt;/strong&gt;x&lt;strong&gt;A&lt;/strong&gt;)就是这样一个向量，该向量的方向同时垂直于向量&lt;strong&gt;A&lt;/strong&gt;和向量&lt;strong&gt;B&lt;/strong&gt;（遵循右手法则），该向量的大小为|&lt;strong&gt;B&lt;/strong&gt;|·|&lt;strong&gt;A&lt;/strong&gt;|·sin&amp;lt;&lt;strong&gt;B&lt;/strong&gt;,&lt;strong&gt;A&lt;/strong&gt;&amp;gt;，其中&amp;lt;&lt;strong&gt;B&lt;/strong&gt;,&lt;strong&gt;A&lt;/strong&gt;&amp;gt;为向量&lt;strong&gt;A&lt;/strong&gt;、&lt;strong&gt;B&lt;/strong&gt;的夹角。
    
    </summary>
    
    
      <category term="R" scheme="https://cognize.me/tags/R/"/>
    
      <category term="数学" scheme="https://cognize.me/tags/%E6%95%B0%E5%AD%A6/"/>
    
  </entry>
  
  <entry>
    <title>利用swirl包学习R语言</title>
    <link href="https://cognize.me/swirl/"/>
    <id>https://cognize.me/swirl/</id>
    <published>2015-08-25T12:51:23.000Z</published>
    <updated>2015-08-25T14:35:05.000Z</updated>
    
    <content type="html"><![CDATA[<p>swirl包是一个非常不错的R语言学习包，在R环境中安装上swirl包之后，我们可以通过简单的命令与swirl包进行交互。swirl包会为我们展示一些R课程，我们选择某个课程之后，就可以进行该课程的交互式学习。<a id="more"></a></p><h2 id="安装swirl"><a href="#安装swirl" class="headerlink" title="安装swirl"></a>安装swirl</h2><p>如果想要在线安装swirl包，利用如下命令就可以：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">install.packages(<span class="string">"swirl"</span>)</span><br></pre></td></tr></table></figure><p>如果想要通过本地安装的方式安装swirl包，大家可以参考<a href="http://cognize.me/2014/11/20/installpackage/" title="《R语言之本地安装R包》">《R语言之本地安装R包》</a>。</p><h2 id="使用swirl"><a href="#使用swirl" class="headerlink" title="使用swirl"></a>使用swirl</h2><p>在安装完swirl包之后，我们可以通过输入如下命令，来开始使用swirl包：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">library</span>(<span class="string">"swirl"</span>)</span><br><span class="line">swirl()</span><br></pre></td></tr></table></figure><p>通过该命令，我们会得到一些R语言的课程列表，大家可以根据自己的需求进行选择性学习。</p><h2 id="安装swirl中的课程"><a href="#安装swirl中的课程" class="headerlink" title="安装swirl中的课程"></a>安装swirl中的课程</h2><p>swirl包的课程是可扩展的，我们可以通过两种方式安装新课程。</p><h3 id="自动方式安装"><a href="#自动方式安装" class="headerlink" title="自动方式安装"></a>自动方式安装</h3><p>命令如下：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">library</span>(swirl)</span><br><span class="line">install_from_swirl(<span class="string">"Course Name Here"</span>)</span><br><span class="line">swirl()</span><br></pre></td></tr></table></figure><p>其中”Course Name Here”为我们要安装的课程名，具体课程名有”R Programming”、”R Programming Alt”、”Data Analysis”、”Mathematical Biostatistics Boot Camp”、”Open Intro”、”Regression Models”、”Getting and Cleaning Data”、”Statistical Inference”、”Writing swirl Courses”等，具体课程的介绍我们可以查看<a href="https://github.com/swirldev/swirl_courses#swirl-courses" title="course repository" rel="external nofollow noopener noreferrer" target="_blank">course repository</a>。</p><h3 id="手动方式安装"><a href="#手动方式安装" class="headerlink" title="手动方式安装"></a>手动方式安装</h3><p>命令如下：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">library</span>(swirl)</span><br><span class="line">install_course_zip(<span class="string">"path/to/file/here/swirl_courses-master.zip"</span>, multi=<span class="literal">TRUE</span>, </span><br><span class="line">                   which_course=<span class="string">"Course Name Here"</span>)</span><br><span class="line">swirl()</span><br></pre></td></tr></table></figure><p>其中”path/to/file/here/swirl_courses-master.zip”是swirl课程集合的本地路径，大家可以去<a href="https://github.com/swirldev/swirl_courses#swirl-courses" title="course repository" rel="external nofollow noopener noreferrer" target="_blank">course repository</a>下载；”Course Name Here”为我们要安装的课程名。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;swirl包是一个非常不错的R语言学习包，在R环境中安装上swirl包之后，我们可以通过简单的命令与swirl包进行交互。swirl包会为我们展示一些R课程，我们选择某个课程之后，就可以进行该课程的交互式学习。
    
    </summary>
    
    
      <category term="R" scheme="https://cognize.me/tags/R/"/>
    
  </entry>
  
  <entry>
    <title>R语言中判断两个对象是否相等</title>
    <link href="https://cognize.me/r-equal/"/>
    <id>https://cognize.me/r-equal/</id>
    <published>2015-08-25T12:34:00.000Z</published>
    <updated>2015-08-26T07:27:25.000Z</updated>
    
    <content type="html"><![CDATA[<p>在R语言中可以使用identical函数或者all.equal函数判断两个对象是否相同，例如：<br>假设x、y是R中我们要比较的对象，<br>identical(x,y)<br>若x等于y，返回TRUE；若x不等于y，则返回FALSE。<a id="more"></a><br>all.equal(x,y)<br>若x等于y，返回TRUE；若x不等于y，则返回不相等的原因。<br>identical和all.equal函数都可以判断两个对象是否相等。identical比较数据的内在关系，如果对象是严格相同的返回TRUE，否则返回FALSE。all.equal用来判断两个对象是否“近似相等”，返回结果为TRUE或者对二者差异的描述。后一个函数在比较数值型变量时考虑到了计算过程中的近似。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在R语言中可以使用identical函数或者all.equal函数判断两个对象是否相同，例如：&lt;br&gt;假设x、y是R中我们要比较的对象，&lt;br&gt;identical(x,y)&lt;br&gt;若x等于y，返回TRUE；若x不等于y，则返回FALSE。
    
    </summary>
    
    
      <category term="R" scheme="https://cognize.me/tags/R/"/>
    
  </entry>
  
  <entry>
    <title>解决hexo一个奇怪的错误</title>
    <link href="https://cognize.me/msysgiterror/"/>
    <id>https://cognize.me/msysgiterror/</id>
    <published>2015-08-22T13:13:08.000Z</published>
    <updated>2015-08-22T14:32:22.000Z</updated>
    
    <content type="html"><![CDATA[<p>其实说是“解决hexo一个奇怪的错误”并不恰当，因为错并不在hexo。<a id="more"></a></p><p>我的hexo一直是部署在笔记本上，前几天笔记本硬盘坏了，等换上新的SSD以后，按照以前的步骤重新部署hexo,但是总是会出现“Permission denied (publickey). fatal: Could not read from remote repository.”和“Please make sure you have the correct access rights and the repository exists.”的错误，起初我以为是SSH公钥配置错误，但是在Git Bash里输入“ssh -T <a href="mailto:git@gitcafe.com" rel="external nofollow noopener noreferrer" target="_blank">git@gitcafe.com</a><br>”却又可以出现“Hi xxxx! You’ve successfully authenticated, but GitCafe does not provide shell access.”的正确提示，反复试了几次，结果都一样</p><p>后来，在<a href="http://v2ex.com/t/215055#reply20" title="某论坛" rel="external nofollow noopener noreferrer" target="_blank">某论坛</a>发现一个网友和我的错误一模一样，但是他也没有解决的方法，就在刚刚我又去看了一下网友发的那个帖子，眼前忽然一亮</p><p><img src="/img/loading.png" data-original="https://picture.cognize.me/cognize/other/2015-8-22-msysgiterror.jpg" alt></p><p>我注意到，我们运行环境是惊人的一样，用了相同版本的msysgit，出现了相同的错误提示，而网上所的教程中msysgit的版本都是另一个版本，会不会是msysgit版本的问题呢？我陷入了深深的思考……</p><p>后来，我在<a href="http://pan.baidu.com/s/1o6miNZ8" rel="external nofollow noopener noreferrer" target="_blank">http://pan.baidu.com/s/1o6miNZ8</a>下载了旧版的msysgit，竟然可以正确运行，没有错误，没有错误，没有错误……</p><p>所以，该错误是由msysgit引起的，有相同错误的童鞋安装<a href="http://pan.baidu.com/s/1o6miNZ8" title="旧版本的msysgit" rel="external nofollow noopener noreferrer" target="_blank">旧版本的msysgit</a>就可以解决该问题。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;其实说是“解决hexo一个奇怪的错误”并不恰当，因为错并不在hexo。
    
    </summary>
    
    
      <category term="hexo" scheme="https://cognize.me/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>解决gvim在win10下乱码的问题</title>
    <link href="https://cognize.me/win10Gvim/"/>
    <id>https://cognize.me/win10Gvim/</id>
    <published>2015-08-16T08:31:46.000Z</published>
    <updated>2015-08-16T09:32:32.000Z</updated>
    
    <content type="html"><![CDATA[<p>今天在win10上安装了gvim，发现中文乱码，于是按照我以前的文章《<a href="http://cognize.me/2015/04/02/winVim/" title="windows下gvim中文乱码解决方案">windows下gvim中文乱码解决方案</a>》进行了设置，但是发现仍然有乱码，后来发现通过设置字体可以解决，方法是在gvim的安装目录找到_vimrc文件，在里面加入如下代码：<a id="more"></a></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">"设置字体</span><br><span class="line">"set guifont=楷体:h10:cGB2312</span><br><span class="line">set guifont=KaiTi:h10:cGB2312</span><br><span class="line">"设置字符集</span><br><span class="line">set encoding=GBK</span><br><span class="line">set ambiwidth=double</span><br><span class="line">set fileencoding=utf-8</span><br><span class="line">set fileencodings=utf-8,ucs-bom,cp936,gb18030,utf-16,big5,gbk,ucs-bom,cp936,latin1</span><br><span class="line">set encoding=GBK</span><br><span class="line">set ambiwidth=double</span><br><span class="line">set fileencoding=utf-8</span><br><span class="line">set fileencodings=utf-8,ucs-bom,cp936,gb18030,utf-16,big5,gbk,ucs-bom,cp936,latin1</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天在win10上安装了gvim，发现中文乱码，于是按照我以前的文章《&lt;a href=&quot;http://cognize.me/2015/04/02/winVim/&quot; title=&quot;windows下gvim中文乱码解决方案&quot;&gt;windows下gvim中文乱码解决方案&lt;/a&gt;》进行了设置，但是发现仍然有乱码，后来发现通过设置字体可以解决，方法是在gvim的安装目录找到_vimrc文件，在里面加入如下代码：
    
    </summary>
    
    
      <category term="vim" scheme="https://cognize.me/tags/vim/"/>
    
  </entry>
  
  <entry>
    <title>博客迁移</title>
    <link href="https://cognize.me/csdnToHexo/"/>
    <id>https://cognize.me/csdnToHexo/</id>
    <published>2015-08-16T07:51:31.000Z</published>
    <updated>2015-08-16T13:24:45.000Z</updated>
    
    <content type="html"><![CDATA[<p>事实上，在2015年以前，我的所有博客都是在CSDN写的。在CSDN写博客有很多优点：<a id="more"></a><br>1.　省时省力。自己只需要关注文章本身，并不需要域名、空间等等。<br>2.　配合CSDN全套。因为它不只有博客，还有问答论坛、资源下载等等一系列相互配合的资源。<br>3.　提高博客的关注度。因为CSDN的pr值非常非常高，相同的文章在CSDN发表比自己搭域名发表要更容易被人们搜索到（这只是个人的猜测），进而帮助更多的人，与更多的人交流，等等等……<br>尽管如此，我还是将博客从CSDN迁出了，原因有很多。<br>我用自己搭建的博客写文章更自由，所有的主题、背景颜色、字体颜色、图片样式、音乐样式、视频样式等等等都可以自己定义，作为一个爱折腾的人，它可以给我更多折腾的空间。<br>忘记在哪看过一段话，大体意思就是你在某某平台上写文章就好比在别人地里耕田，最终还是别人的。对于这段话，我深以为然。在大的平台上写文章可以更容易的获得更多的访问量，但是我们的博客始终会打着某某平台的烙印，到头来，我们只是为别人耕田。我想要自己的土地，自己的空间，我的地盘我做主。这也是我从CSDN迁出的最主要原因。<br>简单说一下，“第一篇文章”是在搭建好现在的博客后写的第一篇文章，所以发布时间在它之前的所有文章都来自我的CSDN博客。所以希望看过我博客的朋友不要因为“第一篇文章”竟然不是第一篇博客而感到疑惑。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;事实上，在2015年以前，我的所有博客都是在CSDN写的。在CSDN写博客有很多优点：
    
    </summary>
    
    
      <category term="博客" scheme="https://cognize.me/tags/%E5%8D%9A%E5%AE%A2/"/>
    
  </entry>
  
  <entry>
    <title>利用Amazon EC2解决RStudio中文乱码问题</title>
    <link href="https://cognize.me/rstudioAMI/"/>
    <id>https://cognize.me/rstudioAMI/</id>
    <published>2015-08-07T09:05:06.000Z</published>
    <updated>2015-08-08T05:39:44.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近，喜迎Windows升级，笔记本从win8.1升到了win10，win10虽然有着酷炫的外观以及高质量的性能，但是某些工具仍然出现了不兼容的情况。就是其中一个。我安装的是最新版的RStudio(0.99.467版)，在安装时安装界面就是乱码，凭着超强的第六感，完成了安装，但是中文却是乱码。举个例子：</p><a id="more"></a>输入：> print(“R语言”)<p>输出：[1] “RÓïÑÔ”<br>网上的方法如：Tools—&gt;Global Options—&gt;Default text encoding—&gt;UTF-8都试了，无效。方法各种无效，RStudio各种乱码，真是万念俱灰啊。<br>后来经大神 <a href="https://d.cosx.org/u/ryo" title="Ryo Eng®" rel="external nofollow noopener noreferrer" target="_blank">Ryo Eng®</a>帮助，发现了Amazon EC2可以解决RStudio问题。说白了就是，因为我的电脑系统问题，不能正常使用RStudio，但是我们可以通过Amazon EC2使用其它系统正常的电脑运行RStudio。<br>Amazon EC2（EC2，Elastic Compute Cloud）是一个让使用者可以租用云端电脑运行所需应用的系统。EC2借由提供Web服务的方式让使用者可以弹性地运行自己的Amazon机器映像档，使用者将可以在这个虚拟机器上运行任何自己想要的软件或应用程式。提供可调整的云计算能力。它旨在使开发者的网络规模计算变得更为容易。<br>需要提前说明的是，本教程使用的是Amazon EC2的免费版，新注册用户可以免费套餐，免费期为一年，一年之后会根据用户的使用量收费。如果各位介意使用一年后的收费问题，后面的部分就没必要看了，可以再去寻找其它方法。关于Amazon EC2的注册非常简单，步骤如同我们平常注册账号一样，如果不懂，请自行google。<br>利用Amazon EC2解决RStudio中文乱码问题具体步骤如下：<br>1.假设你已经成功注册了Amazon EC2，那么呈现在你面前的应该是如下画面：<br><img src="/img/loading.png" data-original="https://picture.cognize.me/cognize/rplot/RStudioAMI-2015-8-7-1.png?imageslim" alt><br>2.点击”EC2”链接，进入“EC2控制面板”界面。<br><img src="/img/loading.png" data-original="https://picture.cognize.me/cognize/rplot/RStudioAMI-2015-8-7-2.png?imageslim" alt><br>3.点击“启动实例”。因为当前我们还没有创建实例，所以会提示要我们创建实例，点击“社区AMI”，在搜索框里输入“RStudio”,按回车键，系统就会列出所有包含RStudio软件的系统，这里我选择第四个（因为它的RStudio版本是最新的），单击选择，进入“选择实例类型”界面。<br><img src="/img/loading.png" data-original="https://picture.cognize.me/cognize/rplot/RStudioAMI-2015-8-7-3.png?imageslim" alt><br>4.这里我选择第一个——t2.micro（因为它是免费的），单击“下一步”，进入“配置实例”界面。<br><img src="/img/loading.png" data-original="https://picture.cognize.me/cognize/rplot/RStudioAMI-2015-8-7-4.png?imageslim" alt><br>5.单击“下一步”，进入“添加存储”界面。<br>6.单击“下一步”，进入“标签实例”界面<br>7.单击“下一步”，进入“配置安全组”界面。安全组名称写“RStudio”，类型选”HTTP”，会出现警告信息，忽略之，点击”启动和审核”，进入”审核”界面。<br><img src="/img/loading.png" data-original="https://picture.cognize.me/cognize/rplot/RStudioAMI-2015-8-7-7.png?imageslim" alt><br>8.点击”启动”。<br><img src="/img/loading.png" data-original="https://picture.cognize.me/cognize/rplot/RStudioAMI-2015-8-7-8.png?imageslim" alt><br>9.会弹出对话框，让用户选择密钥，选择”在没有密钥对的情况下继续”，选上”我确认无法连接到此实例，除非我已经知道内置于AMI中的密码”，点击”启动实例”启动实例。<br><img src="/img/loading.png" data-original="https://picture.cognize.me/cognize/rplot/RStudioAMI-2015-8-7-9.png?imageslim" alt><br>10.点击”查看实例”查看实例。<br><img src="/img/loading.png" data-original="https://picture.cognize.me/cognize/rplot/RStudioAMI-2015-8-7-10.png?imageslim" alt><br>11.如下，就是实例的详细信息，不过我的大部分信息都被我划掉了，你们看不到，你们看不到，下图中的”共有DNS”值是一个网址，转到该网址，就进入了RStudio登录界面。<br><img src="/img/loading.png" data-original="https://picture.cognize.me/cognize/rplot/RStudioAMI-2015-8-7-11.png?imageslim" alt><br>12.第一次登录默认的Username和Password都是”rstudio”，输入之，登录。<br><img src="/img/loading.png" data-original="https://picture.cognize.me/cognize/rplot/RStudioAMI-2015-8-7-12.png?imageslim" alt><br>13.登录成功就会出现RStudio界面，看着很像本地的RStudio，但它只需要浏览器就可以运行了，不需要安装R,不需要安装RStudio。很简单是不是，很方便是不是。<br><img src="/img/loading.png" data-original="https://picture.cognize.me/cognize/rplot/RStudioAMI-2015-8-7-13.png?imageslim" alt><br>14.建议修改登录密码。选中”passwd()”，点击”Source”，按照提示修改登录密码，重新登录，试一下中文：<br>输入：&gt; print(“我很聪明是不是？”)<br>输出：[1] “是的，你很聪明”<br>输出是中文有木有，没有乱码有木有<br>15.Enjoy it<br>参考文章：<a href="http://www.louisaslett.com/RStudio_AMI/" title="RStudio Server Amazon Machine Image (AMI)" rel="external nofollow noopener noreferrer" target="_blank">RStudio Server Amazon Machine Image (AMI)</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近，喜迎Windows升级，笔记本从win8.1升到了win10，win10虽然有着酷炫的外观以及高质量的性能，但是某些工具仍然出现了不兼容的情况。就是其中一个。我安装的是最新版的RStudio(0.99.467版)，在安装时安装界面就是乱码，凭着超强的第六感，完成了安装，但是中文却是乱码。举个例子：&lt;/p&gt;
    
    </summary>
    
    
      <category term="R" scheme="https://cognize.me/tags/R/"/>
    
      <category term="RStudio" scheme="https://cognize.me/tags/RStudio/"/>
    
      <category term="Amazon EC2" scheme="https://cognize.me/tags/Amazon-EC2/"/>
    
  </entry>
  
  <entry>
    <title>Hexo图床管理(二)</title>
    <link href="https://cognize.me/tuchuang2/"/>
    <id>https://cognize.me/tuchuang2/</id>
    <published>2015-08-03T07:48:20.000Z</published>
    <updated>2015-08-05T03:31:53.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/img/loading.png" data-original="https://picture.cognize.me/public/view/2015-8-3-tuchuang2.jpg?imageslim"></p><p>前一段时间写了一篇<a href="https://cognize.me/tuchuang/" title="《Hexo图床管理》">《Hexo图床管理》</a>，今天终于派上了用场，今天刚从某存储转到七牛云存储，还有很多话说。</p><a id="more"></a><p><a href="https://cognize.me/tuchuang/" title="《Hexo图床管理》">《Hexo图床管理》</a>的大体思路是在我们主题目录下的”scripts“文件夹中创建一个.js文件（文件名任意，如mypicture.js等），在里面添加如下内容：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">hexo.extend.tag.register(<span class="string">'plant'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">args, content</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> id = args[<span class="number">0</span>];</span><br><span class="line">  <span class="keyword">return</span> <span class="string">'http://plant.xxx.com/'</span>;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>然后，以后写文章插入图片时不再使用如下形式:</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">![](http://plant.xxx.com/pictureName.jpg)</span><br></pre></td></tr></table></figure><p>而是以</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"&#123;%plant%&#125;pictureName.jpg"</span>&gt;</span><span class="tag">&lt;/<span class="name">img</span>&gt;</span></span><br></pre></td></tr></table></figure><p>的形式替代之，以后如果更换图床，只需要更改那个.js文件就可以，不明白的同学可以去看一下<a href="https://cognize.me/tuchuang/" title="《Hexo图床管理》">《Hexo图床管理》</a>。<br>现在，我把图床搬家到了七牛云存储，发现了更多可以优化的地方。<br>七牛提供了“图片处理”的功能，可以为我们的图片瘦身，还可以增加我们的水印，真的非常方便。要知道，我以前使用的原图大小一般都在2M左右，甚至更大，但是通过定制图片的格式，大小能减小到几十KB，大大提高了博客的访问速度。<br>网上很多关于七牛图片处理的教程都是新建图片样式，自定义图片的分辨率、图片质量等信息，假设新建的样式叫”newStyle”，我们要使用新样式只需要在原图片地址后加入”-newStyle”就好，例如，我之前插入图片都是如下格式：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"&#123;%plant%&#125;apple.jpg"</span>&gt;</span><span class="tag">&lt;/<span class="name">img</span>&gt;</span></span><br></pre></td></tr></table></figure><p>现在，为了使用新样式，我必须使用如下方式插入图片：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"&#123;%plant%&#125;apple.jpg-newStyle"</span>&gt;</span><span class="tag">&lt;/<span class="name">img</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这种做法不错，但是对我来说有几个弊端：<br>1.七牛云存储支持链接后加“-样式名”的格式，但是很多图床并不支持，如果你想以后更换其它图床的话，为了图片正常显示，你必须把每个链接后的“-样式名”去掉，非常麻烦；<br>2.万一以后你突然不满意现在的样式，你很可能要再新建样式，然后将文章的旧样式替换成新样式，如果你希望很多图片都用这种样式，还是要一篇篇的修改，非常麻烦。<br>为了解决上述问题，我们可以再在.js文件中添加如下代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">hexo.extend.tag.register(<span class="string">'suffix'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">args, content</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> id = args[<span class="number">0</span>];</span><br><span class="line">  <span class="keyword">return</span> <span class="string">'?imageView2/1/w/751/h/464'</span>;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>其中，751代表新建图片的宽度(px)，464代表图片的高度(px)，大家可以根据自己的喜好设定。<br>然后使用如下代码插入图片：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"&#123;%plant%&#125;apple.jpg&#123;%suffix%&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">img</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这样输出的图像就是一副宽751高464的图像，如果大家想要输出原图或者迁入其它图床，只需要return ‘’即可。<br>这样，大家就可以通过更改.js文件随心所欲的控制输出图片的大小格式了。当然，大家也可以在.js文件中定义多种样式，根据图片不同调用不同的格式。<br>如何通过.js文件添加水印我还没有找到方法，相信聪明的各位一定会找到。更多详细的图片格式设置，大家请参考：<a href="http://developer.qiniu.com/docs/v6/api/reference/fop/image/imageview2.html" rel="external nofollow noopener noreferrer" target="_blank">七牛基本图片处理</a>。<br>另外，安利一下七牛云存储，确实不错，如果大家仅仅在找图床，强力推荐之。如果大家还没有七牛的账号，欢迎通过<a href="https://portal.qiniu.com/signup?code=3lftkxs9jj42a" rel="external nofollow noopener noreferrer" target="_blank">我的邀请链接</a>注册，如果你成为标准会员，我将得到5G的下载流量。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://picture.cognize.me/public/view/2015-8-3-tuchuang2.jpg?imageslim&quot;&gt;&lt;/p&gt;
&lt;p&gt;前一段时间写了一篇&lt;a href=&quot;https://cognize.me/tuchuang/&quot; title=&quot;《Hexo图床管理》&quot;&gt;《Hexo图床管理》&lt;/a&gt;，今天终于派上了用场，今天刚从某存储转到七牛云存储，还有很多话说。&lt;/p&gt;
    
    </summary>
    
    
      <category term="hexo" scheme="https://cognize.me/tags/hexo/"/>
    
      <category term="图床" scheme="https://cognize.me/tags/%E5%9B%BE%E5%BA%8A/"/>
    
  </entry>
  
  <entry>
    <title>安装最新版hexo(hexo 3)</title>
    <link href="https://cognize.me/installhexo3/"/>
    <id>https://cognize.me/installhexo3/</id>
    <published>2015-07-27T12:55:40.000Z</published>
    <updated>2016-05-07T11:20:28.552Z</updated>
    
    <content type="html"><![CDATA[<p>虽然本篇的主题是安装hexo 3，但是因为某些插件及符号无法在hexo中使用，如emoji表情插件无法使用；&#123;% %&#125;符号无法使用，致使无法用 <a href="http://cognize.me/2015/07/22/tuchuang/" title="《Hexo图床管理》">《Hexo图床管理》</a>的方法进行图床管理。因此我重新退回了hexo 2.8.3版本。但是，事物总是在发展，沉舟侧畔千帆过，病树前头万木春，新版本肯定会取代旧版本，如果各位想要安装最新版的hexo，请继续往下看。</p><a id="more"></a><p>事实上，hexo官网给出了最新版hexo的安装教程：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-cli -g</span><br><span class="line">npm install hexo --save</span><br><span class="line">hexo init</span><br><span class="line">npm install</span><br></pre></td></tr></table></figure><p>在shell中运行上述代码就可以安装最新版的hexo，但是当我们将写好的博客上传到github或gitcafe等空间时（即运行hexo d时），可能会出现“ERROR Deployer not found: github”的错误，解决方法如下：<br>1.将我们hexo根目录下的config文件中的如下代码：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line"><span class="attr">  type:</span> <span class="string">github</span></span><br><span class="line"><span class="attr">  repository:</span> <span class="string">xxxxx</span></span><br><span class="line"><span class="attr">  branch:</span> <span class="string">xxxx</span></span><br></pre></td></tr></table></figure><p>用git替换type中的值github<br>2.运行npm install hexo-deployer-git –save<br>3.最后运行hexo d，就可以将我们的博客提交到博客托管空间。</p>]]></content>
    
    <summary type="html">
    
      安装最新版hexo，即hexo 3
    
    </summary>
    
    
      <category term="hexo" scheme="https://cognize.me/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>Hexo图床管理</title>
    <link href="https://cognize.me/tuchuang/"/>
    <id>https://cognize.me/tuchuang/</id>
    <published>2015-07-22T14:51:50.000Z</published>
    <updated>2015-08-03T08:36:30.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/img/loading.png" data-original="https://picture.cognize.me/public/view/2015-7-22-tuchuang.jpg?imageslim" alt></p><p>好久没有访问自己的博客了，当最近打开时，猛然一惊，博客中的图片都为无法显示的状态，刚开始以为是自己的网速不行，后来在写文章添加图片时才发现，我图床所在的存储平台进行了改版，以前的图片链接地址都失效了，导致我博客中的图片无法显示。以前的博客可是有很多图片的，要是一个个的更改图片地址真的是个大工程。</p><a id="more"></a><p>后来，终于找到了方法。<br>Hexo支持Markdown写作，所以我们在为博客添加图片时，都是采用如下格式:</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">![](http://xxx.com/bucketName/pictureName.jpg)</span><br></pre></td></tr></table></figure><p>或者</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"http://xxx.com/bucketName/pictureName.jpg"</span>&gt;</span></span><span class="xml"><span class="tag">&lt;/<span class="name">img</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>从上面可以看出，我们的地址包含两部分，一部分是图片所在仓库的地址（<a href="http://xxx.com/bucketName/" rel="external nofollow noopener noreferrer" target="_blank">http://xxx.com/bucketName/</a>）,另一部分是图片的名字（pictureName.jpg），仓库地址是我们注册某个存储平台时该平台提供的，而后一部分是我们真实的图片名字，是我们自己提供的。<br>一旦该存储平台失效，我们的图片链接也会跟着失效。然后，我们会寻找新的可用的存储平台，然后将图片迁移过去。怎么迁移呢？<br>1.上传我们的图片；<br>2.将我们博客中的图片地址改为新的地址。<br>但是，问题是，如果我们博客中有很多很多图片，难道我们要一个文档一个文档的修改地址吗？无疑，这样做工作量是很大的。<br>但是，如果这样呢：<br>1.我们先在博客中定义图片仓库的地址（如：<a href="http://xxx.com/bucketName" rel="external nofollow noopener noreferrer" target="_blank">http://xxx.com/bucketName</a>）,并将其复制给某个全局变量pictureAdress；<br>2.我们在添加图片时地址使用pictureAdress+pictureName.jpg的形式;<br>一旦，我们使用的存储平台失效了，即pictureAdress目前的值失效了，我们只需要修改pictureAdress，赋予它新的图片仓库地址就可以啦。虽然这个过程也要上传图片，但是在更改文档时，只需要修改pictureAdress就可以了，并不需要一个图片地址一个图片地址的修改了，是不是简单很多了。<br>具体方法如下：<br>在本地的hexo中，找到你现在所用的主题目录，打开其中的”scripts“文件夹，然后创建一个.js文件（文件名任意，如mypicture.js等），在里面添加如下内容：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">hexo.extend.tag.register(<span class="string">'plant'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">args, content</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> id = args[<span class="number">0</span>];</span><br><span class="line">  <span class="keyword">return</span> <span class="string">'http://plant.xxx.com/'</span>;</span><br><span class="line">&#125;);</span><br><span class="line">hexo.extend.tag.register(<span class="string">'animal'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">args, content</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> id = args[<span class="number">0</span>];</span><br><span class="line">  <span class="keyword">return</span> <span class="string">'http://animal.xxx.com/'</span>;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>注意：上面的”<a href="http://plant.xxx.com/" rel="external nofollow noopener noreferrer" target="_blank">http://plant.xxx.com/</a>“和”<a href="http://animal.xxx.com/" rel="external nofollow noopener noreferrer" target="_blank">http://animal.xxx.com/</a>“即代表了pictureAdress的值，上面只是写了两个函数，一个代表某存储中植物图片库的地址，另一个代表了某存储中动物图片库的地址，大家可以根据自己的情况对库的数量进行增删。在我们写文章添加图片时，要加上这个库地址，比如我想添加一张苹果的图片，它在存储平台的真实地址是”<a href="http://plant.xxx.com/apple.jpg" rel="external nofollow noopener noreferrer" target="_blank">http://plant.xxx.com/apple.jpg</a>“，为了显示该图片，我们应该这么写：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;img src=<span class="string">"&#123;%plant%&#125;apple.jpg"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">img</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>因为&#123;%plant%&#125;代表了<a href="http://plant.xxx.com/" rel="external nofollow noopener noreferrer" target="_blank">http://plant.xxx.com/</a>，&#123;%plant%&#125;apple.jpg就代表了”<a href="http://plant.xxx.com/apple.jpg" rel="external nofollow noopener noreferrer" target="_blank">http://plant.xxx.com/apple.jpg</a>“这个真实地址。一旦我们使用的存储平台失效了，我们只需要将图片上传到新平台，然后将&#123;%plant%&#125;的值改为新平台给我们的地址<a href="http://plant.yyy.com/" rel="external nofollow noopener noreferrer" target="_blank">http://plant.yyy.com/</a>就可以啦。<br>参考文章：<em><a href="http://www.winterland.me/2013/11/bae-imbed/" rel="external nofollow noopener noreferrer" target="_blank">http://www.winterland.me/2013/11/bae-imbed/</a></em></p>]]></content>
    
    <summary type="html">
    
      Hexo如何进行图床管理
    
    </summary>
    
    
      <category term="hexo" scheme="https://cognize.me/tags/hexo/"/>
    
      <category term="图床" scheme="https://cognize.me/tags/%E5%9B%BE%E5%BA%8A/"/>
    
  </entry>
  
  <entry>
    <title>利用R包RCurl登录新浪微博</title>
    <link href="https://cognize.me/rcurlLogin/"/>
    <id>https://cognize.me/rcurlLogin/</id>
    <published>2015-07-21T09:00:40.000Z</published>
    <updated>2015-08-02T14:11:15.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><p>在火狐浏览器上安装插件“Live http headers”，重启浏览器。<br>在火狐浏览器上手动登录新浪微博。<br>手动成功登录后，鼠标右键单击“查看页面信息”，弹出如下信息：</p><a id="more"></a><p><img src="/img/loading.png" data-original="https://picture.cognize.me/cognize/rplot/2015-7-21-RCurlLogin.png?imageslim" alt="弹出框"><br>选择“Headers”,点击“save as”，将内容保存为”weibo”。打开下载好的”weibo”，你会发现内容分为<br>两部分，即“Request Headers”和“Response Header”。这里我们只需要“Request Headers”的信息，<br>将内容：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Host: xxx</span><br><span class="line">User-Agent: xxx</span><br><span class="line">Accept: xxx</span><br><span class="line">Accept-Language: xxx</span><br><span class="line">Accept-Encoding: xxx</span><br><span class="line">Referer: xxx</span><br><span class="line">Cookie: xxx</span><br><span class="line">Connection: xxx</span><br></pre></td></tr></table></figure><p>修改成程序需要的格式即可，具体形式在代码中会详述。</p><h2 id="Coding"><a href="#Coding" class="headerlink" title="Coding"></a>Coding</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">require(RCurl)</span><br><span class="line">myHttpheader&lt;- c(</span><br><span class="line">&quot;Host&quot;=&quot;xxx&quot;,</span><br><span class="line">&quot;User-Agent&quot;=&quot;xxx&quot;,</span><br><span class="line">&quot;Accept&quot;=&quot;xxx&quot;,</span><br><span class="line">&quot;Accept-Language&quot;=&quot;xxx&quot;,</span><br><span class="line">&quot;Accept-Encoding&quot;=&quot;xxx&quot;,</span><br><span class="line">&quot;Referer&quot;=&quot;xxx&quot;,</span><br><span class="line">&quot;Cookie&quot;=&quot;xxx&quot;,</span><br><span class="line">&quot;Connection&quot;=&quot;xxx&quot;</span><br><span class="line">)#本段代码对应“weibo”文件中的“Request Headers”，“xxx”换成大家文件中的真实值</span><br><span class="line">d =debugGatherer()</span><br><span class="line">cHandle&lt;- getCurlHandle(httpheader=myHttpheader,followlocation=1,</span><br><span class="line">          debugfunction=d$update,verbose=TRUE)</span><br><span class="line">temp&lt;- getURL(&quot;http://d.weibo.com/&quot;,curl=cHandle,.encoding=&quot;gbk&quot;)</span><br><span class="line">grep(&quot;yourWeiboName&quot;,temp)#&quot;yourWeiboName&quot;请替换成大家真实的微博用户名，大小写一定要一致</span><br></pre></td></tr></table></figure><p>运行上述代码，如果登录成功，会返回结果“1”，否则为“integer(0)”。<br>当然，本代码也可以用来登录其它网站，方法相同，大家可以自己尝试。<br>参考文章：<em><a href="http://cos.name/cn/topic/17816/" rel="external nofollow noopener noreferrer" target="_blank">http://cos.name/cn/topic/17816/</a></em><br><em><a href="http://www.xueningzhu.com/用rcurl登录人人网/" rel="external nofollow noopener noreferrer" target="_blank">http://www.xueningzhu.com/用rcurl登录人人网/</a></em></p>]]></content>
    
    <summary type="html">
    
      利用R包RCurl模拟登录新浪微博
    
    </summary>
    
    
      <category term="R" scheme="https://cognize.me/tags/R/"/>
    
  </entry>
  
  <entry>
    <title>R语言中barplot函数的用法</title>
    <link href="https://cognize.me/r-barplot/"/>
    <id>https://cognize.me/r-barplot/</id>
    <published>2015-07-18T08:59:37.000Z</published>
    <updated>2015-08-13T08:10:46.000Z</updated>
    
    <content type="html"><![CDATA[<p>barplot函数在R中是一个画条线图的函数。<br>最简单的用法，即当参数为一个向量时，用法如例子所示：</p><a id="more"></a><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; mydata&lt;-c(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>)</span><br><span class="line">&gt; barplot(mydata)</span><br></pre></td></tr></table></figure><p>结果如下图所示：<br><img src="/img/loading.png" data-original="https://picture.cognize.me/cognize/rplot/2015-7-18-r-barplot.png?imageslim" alt><br>结果图形的x轴被分成了五份，因为mydata中一共有五个数据，y轴则对应了每个数据的具体数值。</p><p>另外，稍复杂的用法是参数为矩阵的情况，用法如下：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; mydata&lt;-data.frame(aaa=c(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>),bbb=c(<span class="number">2</span>,<span class="number">4</span>,<span class="number">6</span>))</span><br><span class="line">&gt; barplot(as.matrix(mydata))</span><br></pre></td></tr></table></figure><p>结果如下图所示：<br><img src="/img/loading.png" data-original="https://picture.cognize.me/cognize/rplot/2015-7-18-r-barplot2.png?imageslim" alt><br>结果图形的x轴被分成两部分，因为mydata一共有两个元素，即aaa和bbb，x轴的默认表情就是mydata的列名，而每列中的数据依次叠加在一起，高度为各自的数值。如果想将数据中每列的图形分开，可以使用参数beside，即：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; barplot(as.matrix(mydata),beside=<span class="literal">T</span>)</span><br></pre></td></tr></table></figure><p>结果如下图所示：<br><img src="/img/loading.png" data-original="https://picture.cognize.me/cognize/rplot/2015-7-18-r-barplot3.png?imageslim" alt><br>此时每列的图形并列排列。<br>此外，barplot函数中还包含col、names.arg等参数，其中col用来控制图像的颜色、names.arg用来设置x轴标签，具体用法大家可自行探索。</p>]]></content>
    
    <summary type="html">
    
      R语言中barplot函数的用法
    
    </summary>
    
    
      <category term="R" scheme="https://cognize.me/tags/R/"/>
    
  </entry>
  
  <entry>
    <title>R语言读取XML文件</title>
    <link href="https://cognize.me/rreadxml/"/>
    <id>https://cognize.me/rreadxml/</id>
    <published>2015-07-12T09:46:30.000Z</published>
    <updated>2015-08-13T08:06:13.000Z</updated>
    
    <content type="html"><![CDATA[<p>首先要加载需要的R包，没有安装的童鞋要提前安装。</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="keyword">library</span>(RCurl)        <span class="comment"># 加载R包</span></span><br><span class="line">&gt; <span class="keyword">library</span>(XML)</span><br></pre></td></tr></table></figure><p>本文以读取在线xml文件<em><a href="http://www.w3school.com.cn/example/xdom/books.xml" rel="external nofollow noopener noreferrer" target="_blank">http://www.w3school.com.cn/example/xdom/books.xml</a></em>为例。</p><a id="more"></a><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; url&lt;-<span class="string">"http://www.w3school.com.cn/example/xdom/books.xml"</span>  <span class="comment">#注，也可以为url复制本地文件的路径</span></span><br><span class="line">&gt; doc&lt;-xmlTreeParse(getURL(url),useInternal = <span class="literal">TRUE</span>)    <span class="comment">#获取文件</span></span><br></pre></td></tr></table></figure><p>该xml文件中存储了很多”book”的信息，假如我们想读取第一本书的”title”的值,方法如下：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; xpathSApply(doc, <span class="string">"/bookstore/book[1]/title"</span>, xmlValue)</span><br></pre></td></tr></table></figure><p>或者</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; xpathSApply(doc, <span class="string">"//book[1]/title"</span>, xmlValue)</span><br></pre></td></tr></table></figure><p>如果函数中填的是完整的节点路径（如”/bookstore/book[1]/title”），则要在节点名称前加”&quot;;如果函数中填的不是完整节点路径（如第二种方法），路径中的第一个节点是几级节点，该节点前就要加几个”&quot;，因为”book”为二级节点，所以其前加两个”&quot;，最终的路径形式为：”//book[1]/title”。因为在”bookstore”节点下有很多”book”节点，而我们想要读取的是第一步的”title”值，所以”book”节点后要加下标，即”book[1]”。如果不加下标，会读取所有book节点的title信息。</p><p>如果我们想要读取第一个”book”节点子节点”title”中属性”lang”的值，方法如下：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; title&lt;-getNodeSet(doc, <span class="string">"/bookstore/book[1]/title"</span>)</span><br><span class="line">&gt; lang&lt;-sapply(title, xmlGetAttr, <span class="string">"lang"</span>)</span><br></pre></td></tr></table></figure><p>或者  </p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; title&lt;-getNodeSet(doc, <span class="string">"//book[1]/title"</span>)</span><br><span class="line">&gt; lang&lt;-sapply(title, xmlGetAttr, <span class="string">"lang"</span>)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      R语言读取XML文件
    
    </summary>
    
    
      <category term="R" scheme="https://cognize.me/tags/R/"/>
    
  </entry>
  
  <entry>
    <title>【转】R语言读取EXCEL文件的各种方法</title>
    <link href="https://cognize.me/readexcel/"/>
    <id>https://cognize.me/readexcel/</id>
    <published>2015-06-29T13:27:31.000Z</published>
    <updated>2015-08-13T07:55:47.000Z</updated>
    
    <content type="html"><![CDATA[<p>注：本文为转载，原文地址：<em><a href="http://www.biostatistic.net/thread-35-1-1.html" rel="external nofollow noopener noreferrer" target="_blank">http://www.biostatistic.net/thread-35-1-1.html</a></em></p><p>R语言读取EXCEL文件的各种方法<br>最近初学R语言，在R语言读入EXCEL数据格式文件的问题上遇到了困难，经过在网上搜索解决了这一问题，下面归纳几种方法，供大家分享：</p><a id="more"></a><p>第一：R中读取excel文件中的数据的路径：</p><p>假定在你的电脑有一个excel文件，原始的文件路径是：D:\work\data\1，如果直接把这个路径拷贝到R中，就会出现错误，原因是：\是escape character（转义符），&#92;&#92;才是真正的\字符，或者用/因此，在R中有两种方法读取该路径：<br>1：在R中输入一下路径：D:&#92;&#92;work&#92;&#92;data&#92;&#92;1<br>2：在R中输入一下路径：D:&#92;&#92;work&#92;&#92;data&#92;&#92;1</p><p>第二：R中读取excel文件中的数据的方法：</p><p>read.table(),read.csv(),read.delim()直接读取EXCEl文件时，都会遇到一下问题：“在读取‘.xls’的TableHeader时遇到不完全的最后一行”。解决的方法有以下几种：假如文件1.1中是一个6乘以2的矩阵，元素为：</p><p>1 23<br>2 24<br>3 25<br>4 26<br>5 27<br>6 28 </p><p>方法1：xls另存为csv格式然后用read.csv：<br>具体过程如下：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&gt; data&lt;-read.csv(<span class="string">"D:\\work\\data\\1.csv"</span>)</span><br><span class="line">&gt; data</span><br><span class="line">  X1 X23</span><br><span class="line"><span class="number">1</span>  <span class="number">2</span>    <span class="number">24</span></span><br><span class="line"><span class="number">2</span>  <span class="number">3</span>    <span class="number">25</span></span><br><span class="line"><span class="number">3</span>  <span class="number">4</span>    <span class="number">26</span></span><br><span class="line"><span class="number">4</span>  <span class="number">5</span>    <span class="number">27</span></span><br><span class="line"><span class="number">5</span>  <span class="number">6</span>    <span class="number">28</span></span><br><span class="line">&gt; data&lt;-read.csv(<span class="string">"D:\\work\\data\\1.csv"</span>,header = <span class="literal">F</span>)</span><br><span class="line">&gt; data</span><br><span class="line">  V1    V2</span><br><span class="line"><span class="number">1</span>  <span class="number">1</span> <span class="number">23333</span></span><br><span class="line"><span class="number">2</span>  <span class="number">2</span>    <span class="number">24</span></span><br><span class="line"><span class="number">3</span>  <span class="number">3</span>    <span class="number">25</span></span><br><span class="line"><span class="number">4</span>  <span class="number">4</span>    <span class="number">26</span></span><br><span class="line"><span class="number">5</span>  <span class="number">5</span>    <span class="number">27</span></span><br><span class="line"><span class="number">6</span>  <span class="number">6</span>    <span class="number">28</span></span><br><span class="line">&gt; data&lt;-read.csv(<span class="string">"D:\\work\\data\\1.csv"</span>,header = <span class="literal">T</span>)</span><br><span class="line">&gt; data</span><br><span class="line">  X1 X23333</span><br><span class="line"><span class="number">1</span>  <span class="number">2</span>    <span class="number">24</span></span><br><span class="line"><span class="number">2</span>  <span class="number">3</span>    <span class="number">25</span></span><br><span class="line"><span class="number">3</span>  <span class="number">4</span>    <span class="number">26</span></span><br><span class="line"><span class="number">4</span>  <span class="number">5</span>    <span class="number">27</span></span><br><span class="line"><span class="number">5</span>  <span class="number">6</span>    <span class="number">28</span></span><br></pre></td></tr></table></figure><p>也就是说header = T（TURE）是默认的状态，在这默认状态下，输出的data矩阵是一个5乘以2的矩阵，第一行作为了data的名字，如果header = F（FALSE），则会现实原始的矩阵结果。</p><p>方法2：xls另存为txt格式然后用read.table：<br>如例子所示：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&gt; data&lt;-read.table(<span class="string">"D:\\work\\data\\1.txt"</span>,header = <span class="literal">T</span>)</span><br><span class="line">&gt; data</span><br><span class="line">  X1 X23</span><br><span class="line"><span class="number">1</span>  <span class="number">2</span>  <span class="number">24</span></span><br><span class="line"><span class="number">2</span>  <span class="number">3</span>  <span class="number">25</span></span><br><span class="line"><span class="number">3</span>  <span class="number">4</span>  <span class="number">26</span></span><br><span class="line"><span class="number">4</span>  <span class="number">5</span>  <span class="number">27</span></span><br><span class="line"><span class="number">5</span>  <span class="number">6</span>  <span class="number">28</span></span><br><span class="line">&gt; data&lt;-read.table(<span class="string">"D:\\work\\data\\1.txt"</span>,header = <span class="literal">F</span>)</span><br><span class="line">&gt; data</span><br><span class="line">  V1 V2</span><br><span class="line"><span class="number">1</span>  <span class="number">1</span> <span class="number">23</span></span><br><span class="line"><span class="number">2</span>  <span class="number">2</span> <span class="number">24</span></span><br><span class="line"><span class="number">3</span>  <span class="number">3</span> <span class="number">25</span></span><br><span class="line"><span class="number">4</span>  <span class="number">4</span> <span class="number">26</span></span><br><span class="line"><span class="number">5</span>  <span class="number">5</span> <span class="number">27</span></span><br><span class="line"><span class="number">6</span>  <span class="number">6</span> <span class="number">28</span></span><br></pre></td></tr></table></figure><p>方法3：打开EXCEL，全选里面的内容，点击复制，然后在R中输入一下命令：</p><p>data &lt;- read.table(“clipboard”, header = T, sep = ‘\t’)<br>结果如下所示：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&gt; data &lt;- read.table(<span class="string">"clipboard"</span>, header = <span class="literal">T</span>, sep = <span class="string">'\t'</span>)</span><br><span class="line">&gt; data</span><br><span class="line">  X1 X23</span><br><span class="line"><span class="number">1</span>  <span class="number">2</span>  <span class="number">24</span></span><br><span class="line"><span class="number">2</span>  <span class="number">3</span>  <span class="number">25</span></span><br><span class="line"><span class="number">3</span>  <span class="number">4</span>  <span class="number">26</span></span><br><span class="line"><span class="number">4</span>  <span class="number">5</span>  <span class="number">27</span></span><br><span class="line"><span class="number">5</span>  <span class="number">6</span>  <span class="number">28</span></span><br><span class="line">&gt; data &lt;- read.table(<span class="string">"clipboard"</span>, header = <span class="literal">F</span>, sep = <span class="string">'\t'</span>)</span><br><span class="line">&gt; data</span><br><span class="line">  V1 V2</span><br><span class="line"><span class="number">1</span>  <span class="number">1</span> <span class="number">23</span></span><br><span class="line"><span class="number">2</span>  <span class="number">2</span> <span class="number">24</span></span><br><span class="line"><span class="number">3</span>  <span class="number">3</span> <span class="number">25</span></span><br><span class="line"><span class="number">4</span>  <span class="number">4</span> <span class="number">26</span></span><br><span class="line"><span class="number">5</span>  <span class="number">5</span> <span class="number">27</span></span><br><span class="line"><span class="number">6</span>  <span class="number">6</span> <span class="number">28</span></span><br></pre></td></tr></table></figure><p>使用这种方法的时候一定要注意复制！剪切板里面没有内容是无法运行的！以上是三种方法，如果还有别的更好的，请大家补充，谢谢！</p>]]></content>
    
    <summary type="html">
    
      R语言读取EXCEL文件的各种方法
    
    </summary>
    
    
      <category term="转载" scheme="https://cognize.me/tags/%E8%BD%AC%E8%BD%BD/"/>
    
      <category term="R" scheme="https://cognize.me/tags/R/"/>
    
  </entry>
  
  <entry>
    <title>【转】R中的逻辑运算符&amp;, &amp;&amp;, |, ||</title>
    <link href="https://cognize.me/rlogic/"/>
    <id>https://cognize.me/rlogic/</id>
    <published>2015-06-11T13:33:15.000Z</published>
    <updated>2015-08-13T03:47:49.000Z</updated>
    
    <content type="html"><![CDATA[<p>注：本文为转载，原文地址：<em><a href="http://blog.qiuworld.com:8080/archives/2921" rel="external nofollow noopener noreferrer" target="_blank">http://blog.qiuworld.com:8080/archives/2921</a></em><br>在R中，逻辑运算符(logical operator)有!, &amp;, &amp;&amp;, |, ||, xor, isTRUE等等。</p><p>问题：&amp;与&amp;&amp;, |与||有什么区别呢？它们是否是一致的呢？</p><p>答：否。我们将&amp;和|称为短逻辑符，&amp;&amp;及||称为长逻辑符。长逻辑符只比较左边和右边的第一个元素，而短逻辑符会比较所以的。我们来看示例：</p><a id="more"></a><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&gt; a&lt;-c(<span class="literal">TRUE</span>, <span class="literal">FALSE</span>, <span class="literal">TRUE</span>, <span class="literal">FALSE</span>)</span><br><span class="line">&gt; b&lt;-c(<span class="literal">FALSE</span>, <span class="literal">FALSE</span>, <span class="literal">TRUE</span>, <span class="literal">TRUE</span>)</span><br><span class="line">&gt; c&lt;-c(<span class="literal">TRUE</span>, <span class="literal">FALSE</span>, <span class="literal">FALSE</span>, <span class="literal">FALSE</span>)</span><br><span class="line">&gt; a &amp; b</span><br><span class="line">[<span class="number">1</span>] <span class="literal">FALSE</span> <span class="literal">FALSE</span>  <span class="literal">TRUE</span> <span class="literal">FALSE</span></span><br><span class="line">&gt; a &amp;&amp; b</span><br><span class="line">[<span class="number">1</span>] <span class="literal">FALSE</span></span><br><span class="line">&gt; a &amp; c</span><br><span class="line">[<span class="number">1</span>]  <span class="literal">TRUE</span> <span class="literal">FALSE</span> <span class="literal">FALSE</span> <span class="literal">FALSE</span></span><br><span class="line">&gt; a &amp;&amp; c</span><br><span class="line">[<span class="number">1</span>] <span class="literal">TRUE</span></span><br><span class="line">&gt; a | b</span><br><span class="line">[<span class="number">1</span>]  <span class="literal">TRUE</span> <span class="literal">FALSE</span>  <span class="literal">TRUE</span>  <span class="literal">TRUE</span></span><br><span class="line">&gt; a || b</span><br><span class="line">[<span class="number">1</span>] <span class="literal">TRUE</span></span><br><span class="line">&gt; a | c</span><br><span class="line">[<span class="number">1</span>]  <span class="literal">TRUE</span> <span class="literal">FALSE</span>  <span class="literal">TRUE</span> <span class="literal">FALSE</span></span><br><span class="line">&gt; a || c</span><br><span class="line">[<span class="number">1</span>] <span class="literal">TRUE</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;注：本文为转载，原文地址：&lt;em&gt;&lt;a href=&quot;http://blog.qiuworld.com:8080/archives/2921&quot; rel=&quot;external nofollow noopener noreferrer&quot; target=&quot;_blank&quot;&gt;http://blog.qiuworld.com:8080/archives/2921&lt;/a&gt;&lt;/em&gt;&lt;br&gt;在R中，逻辑运算符(logical operator)有!, &amp;amp;, &amp;amp;&amp;amp;, |, ||, xor, isTRUE等等。&lt;/p&gt;
&lt;p&gt;问题：&amp;amp;与&amp;amp;&amp;amp;, |与||有什么区别呢？它们是否是一致的呢？&lt;/p&gt;
&lt;p&gt;答：否。我们将&amp;amp;和|称为短逻辑符，&amp;amp;&amp;amp;及||称为长逻辑符。长逻辑符只比较左边和右边的第一个元素，而短逻辑符会比较所以的。我们来看示例：&lt;/p&gt;
    
    </summary>
    
    
      <category term="转载" scheme="https://cognize.me/tags/%E8%BD%AC%E8%BD%BD/"/>
    
      <category term="R" scheme="https://cognize.me/tags/R/"/>
    
  </entry>
  
</feed>
